" =================================================================
"                            Global 
" =================================================================
" Display numbers next to lines
set number
set relativenumber 

" Display line wrapping and allow horizontal scrolling 
set nowrap
set sidescroll=1

" Set gui cursor
set guicursor=""

" Define how tabs behave
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent
set smartindent

" Remove backups and let undotree to take over
set noswapfile
set nobackup
set undodir = "~/.vim/undodir"
set undofile

" Remove highlighting from search
set nohlsearch
set incsearch 

" Add proper colors
set termguicolors
set colorcolumn="80"

" Set scrolling options
set scrolloff=8
set signcolumn=yes

" Fast update time
set updatetime=50

" Split windows location
set splitbelow
set splitright

" Disable bell sound
set visualbell
set noerrorbells

" Macro recording: qq - start, q- quit, Q- apply macro
nnoremap Q @q
vnoremap Q :norm @q<cr>

" Map leader to space
let mapleader=" "

" Configure global python
let g:python3_host_prog='/usr/bin/python'

" Yaml configurations
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab 

" =================================================================
"                             Plugins
" =================================================================
call plug#begin('~/.vim/plugged')

" Color scheme
Plug 'morhetz/gruvbox'

" Vim defaults
Plug 'tpope/vim-sensible'

" Undo tree
Plug 'mbbill/undotree'

" Fzf
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Add functionality to comment code (gcc)
Plug 'tpope/vim-commentary'

" Git
Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'

" Automatically adjust tabs based on files
Plug 'tpope/vim-sleuth'

" Surround parenthesis and others
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs'

" CSV formatting
Plug 'chrisbra/csv.vim'

" LSP
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'neovim/nvim-lspconfig'
Plug 'neovim/nvim-lspconfig'

" Snippets
Plug 'saadparwaiz1/cmp_luasnip' 
Plug 'L3MON4D3/LuaSnip' 
Plug 'rafamadriz/friendly-snippets'
Plug 'SirVer/ultisnips'

" Automatic LSP server installs
Plug 'williamboman/mason.nvim'
Plug 'williamboman/mason-lspconfig.nvim'

" Highlighting
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}"

" Telescope & Harpoon
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.0' }
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release && cmake --build build --config Release && cmake --install build --prefix build' }
Plug 'ThePrimeagen/harpoon'
Plug 'nvim-telescope/telescope-file-browser.nvim'
Plug 'nvim-tree/nvim-web-devicons'

" Debug code
Plug 'mfussenegger/nvim-dap'
Plug 'mfussenegger/nvim-dap-python'

" Vim editing in firefox
Plug 'raghur/vim-ghost', {'do': ':GhostInstall'} 

" Vim syntax for helm templates
Plug 'towolf/vim-helm'

" Indent lines 
Plug 'lukas-reineke/indent-blankline.nvim'

call plug#end()

" =================================================================
"                            Utilities 
" =================================================================
" Run python code inside VIM
nmap <F4> <Esc>:w<cr>:!clear;python3 %<cr>

" Find any file with FZF
nnoremap <C-p> :GFiles<cr>

" Show errors in the statusline (vim-airline + ALE)
let g:airline#extensions#ale#enabled = 1

" =================================================================
"                           Telescope 
" =================================================================
" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" =================================================================
"                           Nvim-dap 
" =================================================================
nnoremap <silent> <F5> <Cmd>lua require'dap'.continue()<CR>
nnoremap <silent> <F10> <Cmd>lua require'dap'.step_over()<CR>
nnoremap <silent> <F11> <Cmd>lua require'dap'.step_into()<CR>
nnoremap <silent> <F12> <Cmd>lua require'dap'.step_out()<CR>
nnoremap <silent> <Leader>db <Cmd>lua require'dap'.toggle_breakpoint()<CR>
nnoremap <silent> <Leader>dB <Cmd>lua require'dap'.set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>
nnoremap <silent> <Leader>dlp <Cmd>lua require'dap'.set_breakpoint(nil, nil, vim.fn.input('Log point message: '))<CR>
nnoremap <silent> <leader>dn :lua require('dap-python').test_method()<CR>
nnoremap <silent> <leader>df :lua require('dap-python').test_class()<CR>
vnoremap <silent> <leader>ds <ESC>:lua require('dap-python').debug_selection()<CR>
nnoremap <silent> <Leader>dr <Cmd>lua require'dap'.repl.open()<CR>
nnoremap <silent> <Leader>dl <Cmd>lua require'dap'.run_last()<CR>

" =================================================================
"                           General remaps 
" =================================================================
nnoremap <leader>pv :Ex<CR> 
nnoremap <leader>u :UndotreeShow<CR> 

" Allows to move highlighted code when in visual mode 
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Allows cursor to stay in place when appending lines in normal mode
nnoremap J mzJ`z 

" Allows cursor to stay in position when half page jumping
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

"Allows search terms to be on middle
nnoremap n nzzzv
nnoremap N Nzzzv

"Allows copying to clipboard 
nnoremap <leader>y "+y
nnoremap <leader>Y "+Y
vnoremap <leader>y "+y

" Allows turning file into executable
nnoremap <silent><leader>x <cmd>!chmod +x %<CR>

" Enable the file-browser
" nnoremap <leader>fb :Telescope file_browser
" nnoremap <leader>fb :Telescope file_browser path:%:p:h select_buffer=true

" =================================================================
"                           Lua configurations 
" =================================================================
lua <<EOF
  -- Configuring automatic installer 
  require("mason").setup()

  -- Autocompletion configuration (from https://github.com/neovim/nvim-lspconfig/wiki/Autocompletion)
  local capabilities = require("cmp_nvim_lsp").default_capabilities()
  local lspconfig = require('lspconfig')

  -- Add snippets
  require("luasnip.loaders.from_vscode").lazy_load()

  -- Use an on_attach function to only map the following keys
  -- after the language server attaches to the current buffer
  local on_attach = function(client, bufnr)
    -- Mappings.
    -- See `:help vim.lsp.*` for documentation on any of the below functions
    local bufopts = { noremap=true, silent=true, buffer=bufnr }
    vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
    vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
    vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)
    vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, bufopts)
    vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, bufopts)
    vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
  end


  -- Enable some language servers with the additional completion capabilities offered by nvim-cmp
  local servers = { 'pyright' }
  for _, lsp in ipairs(servers) do
    lspconfig[lsp].setup {
      on_attach = on_attach,
      capabilities = capabilities,
    }
  end

  -- luasnip setup
  local luasnip = require 'luasnip'

  -- nvim-cmp setup
  local cmp = require 'cmp'
  cmp.setup {
    snippet = {
      expand = function(args)
        luasnip.lsp_expand(args.body)
      end,
    },
    mapping = cmp.mapping.preset.insert({
      ['<C-d>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<CR>'] = cmp.mapping.confirm {
        behavior = cmp.ConfirmBehavior.Replace,
        select = true,
      },
      ['<Tab>'] = cmp.mapping(function(fallback)
        if cmp.visible() then
          cmp.select_next_item()
        elseif luasnip.expand_or_jumpable() then
          luasnip.expand_or_jump()
        else
          fallback()
        end
      end, { 'i', 's' }),
      ['<S-Tab>'] = cmp.mapping(function(fallback)
        if cmp.visible() then
          cmp.select_prev_item()
        elseif luasnip.jumpable(-1) then
          luasnip.jump(-1)
        else
          fallback()
        end
      end, { 'i', 's' }),
    }),
    sources = {
      { name = 'nvim_lsp' },
      { name = 'luasnip' },
    },
  }
  
  -- Add syntax highlighting
  require'nvim-treesitter.configs'.setup {
    highlight = {
      enable = true,
      -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
      -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
      -- Using this option may slow down your editor, and you may see some duplicate highlights.
      -- Instead of true it can also be a list of languages
      additional_vim_regex_highlighting = false,
    },
  }
  
  -- Add telescope, harpoon and file_browser
  local fb_actions = require "telescope._extensions.file_browser.actions"

  require('telescope').setup {
    extensions = {
      fzf = {
        fuzzy = true,                    -- false will only do exact matching
        override_generic_sorter = true,  -- override the generic sorter
        override_file_sorter = true,     -- override the file sorter
        case_mode = "smart_case",        -- or "ignore_case" or "respect_case"
      },
      harpoon = {
          save_on_toggle = false,
          save_on_change = true,
          enter_on_sendcmd = false,
          tmux_autoclose_windows = false,
          excluded_filetypes = { "harpoon" },
          mark_branch = false,
      },
      file_browser = { 
        theme = "ivy",
        hijack_netrw = true,  -- disable netrw and use telescope-file-browser inplace
        mappings = {
          ["i"] = {
            ["<A-c>"] = fb_actions.create,
            ["<S-CR>"] = fb_actions.create_from_prompt,
            ["<A-r>"] = fb_actions.rename,
            ["<A-m>"] = fb_actions.move,
            ["<A-y>"] = fb_actions.copy,
            ["<A-d>"] = fb_actions.remove,
            ["<C-o>"] = fb_actions.open,
            ["<C-g>"] = fb_actions.goto_parent_dir,
            ["<C-e>"] = fb_actions.goto_home_dir,
            ["<C-w>"] = fb_actions.goto_cwd,
            ["<C-t>"] = fb_actions.change_cwd,
            ["<C-f>"] = fb_actions.toggle_browser,
            ["<C-h>"] = fb_actions.toggle_hidden,
            ["<C-s>"] = fb_actions.toggle_all,
            ["<bs>"] = fb_actions.backspace,
          },
          ["n"] = {
            ["c"] = fb_actions.create,
            ["r"] = fb_actions.rename,
            ["m"] = fb_actions.move,
            ["y"] = fb_actions.copy,
            ["d"] = fb_actions.remove,
            ["o"] = fb_actions.open,
            ["g"] = fb_actions.goto_parent_dir,
            ["e"] = fb_actions.goto_home_dir,
            ["w"] = fb_actions.goto_cwd,
            ["t"] = fb_actions.change_cwd,
            ["f"] = fb_actions.toggle_browser,
            ["h"] = fb_actions.toggle_hidden,
            ["s"] = fb_actions.toggle_all,
          },
        },
      },
    },
  }

  -- To get fzf and harpoon loaded and working with telescope, you need to call
  -- load_extension, somewhere after setup function:
  require('telescope').load_extension('fzf')
  require('telescope').load_extension('harpoon')

  -- Adding the debug capacity
  require('dap-python').setup('~/.virtualenvs/debugpy/bin/python')
  require('dap-python').test_runner = 'pytest'

  -- Adding file-browser 
  require('telescope').load_extension('file_browser')

  -- Setting up the indent blankline 
  vim.opt.list = true
  vim.opt.listchars:append "space:⋅"
  vim.opt.listchars:append "eol:↴"

  require('indent_blankline').setup {
    space_char_blankline = " ",
    show_current_context = true,
    show_current_context_start = true,
  }

EOF

" =================================================================
"                          Other 
" =================================================================
" Adding colorscheme
colorscheme gruvbox 
